name: Zig Codegen Tests

on:
  push:
    branches: [main, feature, codegen, graphzant]
  pull_request:
    branches: [main, feature, codegen, graphzant]
  workflow_dispatch:

jobs:
  setup-models:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: tests/CodeGen/Python-ONNX/requirements.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/CodeGen/Python-ONNX/requirements.txt

      - name: Generate ONNX test models
        run: python3 tests/CodeGen/Python-ONNX/onnx_gen.py

      - name: Upload generated models
        uses: actions/upload-artifact@v4
        with:
          name: onnx-models
          path: |
            datasets/
            oneop_models/
          retention-days: 1

  test-oneop:
    runs-on: ubuntu-latest
    needs: setup-models
    strategy:
      matrix:
        operation: [Add, Conv, MatMul, Relu, Softmax]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download generated models
        uses: actions/download-artifact@v4
        with:
          name: onnx-models

      - name: Set up Zig 0.15.2
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.15.2

      - name: Generate OneOp codegen for ${{ matrix.operation }}
        run: zig build op-codegen-gen -Dop=${{ matrix.operation }}

      - name: Test OneOp codegen for ${{ matrix.operation }}
        run: zig build op-codegen-test -Dop=${{ matrix.operation }} --summary all

  test-lib-generation:
    runs-on: ubuntu-latest
    needs: setup-models
    strategy:
      matrix:
        model: [mnist-8]
        version: [v1]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download generated models
        uses: actions/download-artifact@v4
        with:
          name: onnx-models

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: tests/CodeGen/Python-ONNX/requirements.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/CodeGen/Python-ONNX/requirements.txt

      - name: Set up Zig 0.15.2
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.15.2

      - name: Generate test data for ${{ matrix.model }}
        run: ./zant user_tests_gen --model ${{ matrix.model }}

      - name: Generate library code for ${{ matrix.model }} ${{ matrix.version }}
        run: zig build lib-gen -Dmodel=${{ matrix.model }} -Denable_user_tests=true -Dcomm=true

      - name: Test generated library for ${{ matrix.model }} ${{ matrix.version }}
        run: zig build lib-test -Dmodel=${{ matrix.model }} -Denable_user_tests=true --summary all

      - name: Build static library for ${{ matrix.model }} ${{ matrix.version }}
        run: zig build lib -Dmodel=${{ matrix.model }} --summary all

  test-extractor:
    runs-on: ubuntu-latest
    needs: setup-models
    strategy:
      matrix:
        model: [mnist-8]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download generated models
        uses: actions/download-artifact@v4
        with:
          name: onnx-models

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: tests/CodeGen/Python-ONNX/requirements.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/CodeGen/Python-ONNX/requirements.txt

      - name: Set up Zig 0.15.2
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.15.2

      - name: Extract nodes from ${{ matrix.model }}
        run: |
          sleep 5
          ./zant onnx_extract --model ${{ matrix.model }}

      - name: Generate extractor tests for ${{ matrix.model }}
        run: |
          sleep 5
          zig build extractor-gen -Dmodel=${{ matrix.model }}

      - name: Run extractor tests for ${{ matrix.model }}
        run: zig build extractor-test -Dmodel=${{ matrix.model }} --summary all

  test-cross-platform:
    runs-on: ubuntu-latest
    needs: setup-models
    strategy:
      matrix:
        target: [x86_64-linux, aarch64-linux, x86_64-windows]
        optimize: [Debug, ReleaseFast]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download generated models
        uses: actions/download-artifact@v4
        with:
          name: onnx-models

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: tests/CodeGen/Python-ONNX/requirements.txt

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/CodeGen/Python-ONNX/requirements.txt

      - name: Set up Zig 0.15.2
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.15.2

      - name: Prepare model for cross-platform test
        run: |
          ./zant shape_thief --model mnist-8 
          ./zant input_setter --model mnist-8 --shape 1,1,28,28

      - name: Generate test data for cross-platform test
        run: ./zant user_tests_gen --model mnist-8

      - name: Generate library code for cross-platform test
        run: |
          echo "Running lib-gen with verbose output..."
          zig build lib-gen -Dmodel=mnist-8 -Denable_user_tests=true --summary all || {
            echo "lib-gen command failed with exit code $?"
            echo "Checking if any build steps completed..."
            ls -la . || true
            find . -name "generated" -type d 2>/dev/null || echo "No generated directory found"
            exit 1
          }

      - name: Verify generated files exist
        run: |
          echo "Checking for generated files..."
          if [ -d "generated" ]; then
            echo "generated/ directory exists"
            ls -la generated/
            if [ -d "generated/mnist-8" ]; then
              echo "mnist-8/ subdirectory exists"
              ls -la generated/mnist-8/
              if [ -f "generated/mnist-8/lib_mnist-8.zig" ]; then
                echo "✓ lib_mnist-8.zig found successfully"
              else
                echo "✗ lib_mnist-8.zig not found in generated/mnist-8/"
                ls -la generated/mnist-8/ || echo "Directory is empty"
                exit 1
              fi
            else
              echo "✗ mnist-8/ subdirectory not found in generated/"
              exit 1
            fi
          else
            echo "✗ generated/ directory does not exist"
            echo "Build may have failed silently. Checking for any output..."
            find . -name "*lib*" -type f 2>/dev/null | head -10 || echo "No lib files found"
            exit 1
          fi

      - name: Build library for ${{ matrix.target }} with ${{ matrix.optimize }}
        run: zig build lib -Dmodel=mnist-8 -Dtarget=${{ matrix.target }} -Doptimize=${{ matrix.optimize }} --summary all
